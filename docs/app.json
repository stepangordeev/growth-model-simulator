[{"name":"app.r","content":"library(shiny)\r\nlibrary(tibble)\r\nlibrary(dplyr)\r\nlibrary(plotly)\r\nlibrary(bslib)\r\nlibrary(fontawesome)\r\nif (FALSE) {\r\n    # explicitly tell shiny about the munsell dependency, otherwise shinylive fails\r\n    library(munsell)\r\n}\r\n\r\nY <- function(A, K, X, L_y, gamma, alpha, beta) {\r\n    A^gamma * K^alpha * X^beta * L_y^(1 - alpha - beta)\r\n}\r\n\r\nK_lom <- function(K, I_y, delta) {\r\n    K * (1 - delta) + I_y\r\n}\r\n\r\nA_lom <- function(A, I_a) {\r\n    A + I_a\r\n}\r\n\r\nL_lom <- function(L, b0, d0, d1, y) {\r\n    L * (1 + b0 - d0 + d1 * y)\r\n}\r\n\r\nI_y <- function(Y, s) {\r\n    s * Y\r\n}\r\n\r\nI_a <- function(A, K, L_a, z, phi, theta) {\r\n    z * A^(phi) * K^(theta) * L_a^(1 - theta)\r\n}\r\n\r\n\r\n# build dataframe period by period\r\n\r\nsimulate <- function(\r\n        L_1 = 1,\r\n        K_1 = 1,\r\n        A_1 = 1,\r\n        alpha = 0,\r\n        beta = 0,\r\n        gamma = 1,\r\n        delta = 0,\r\n        phi = 0,\r\n        theta = 0,\r\n        b0 = 0,\r\n        d0 = 0,\r\n        d1 = 0,\r\n        z = 0,\r\n        s = 0,\r\n        a = 0, # researcher share\r\n        X = 1,\r\n        T = 200\r\n    ) {\r\n    df <- tibble(\r\n        period = 1:T,\r\n        Y = numeric(T),\r\n        A = numeric(T),\r\n        K = numeric(T),\r\n        L = numeric(T),\r\n        I_y = numeric(T),\r\n        I_a = numeric(T),\r\n        C = numeric(T),\r\n        y = numeric(T),\r\n        k = numeric(T),\r\n        x = numeric(T),\r\n        c = numeric(T),\r\n        g_Y = numeric(T),\r\n        g_y = numeric(T),\r\n        g_A = numeric(T),\r\n        g_K = numeric(T),\r\n        g_k = numeric(T),\r\n        g_L = numeric(T),\r\n        g_C = numeric(T),\r\n        g_c = numeric(T)\r\n    )\r\n    df$L[1] <- L_1\r\n    df$K[1] <- K_1\r\n    df$A[1] <- A_1\r\n    df$Y[1] <- Y(df$A[1], df$K[1], X, df$L[1]*(1-a), gamma, alpha, beta)\r\n    df$I_y[1] <- I_y(df$Y[1], s)\r\n    df$I_a[1] <- I_a(df$A[1], df$K[1], df$L[1]*a, z, phi, theta)\r\n    df$C[1] <- df$Y[1] - df$I_y[1]\r\n    df$y[1] <- df$Y[1] / df$L[1]\r\n    df$k[1] <- df$K[1] / df$L[1]\r\n    df$x[1] <- X / df$L[1]\r\n    df$c[1] <- df$C[1] / df$L[1]\r\n    for (t in 1:(T-1)) {\r\n        df$A[t+1] <- A_lom(df$A[t], df$I_a[t])\r\n        df$L[t+1] <- L_lom(df$L[t], b0, d0, d1, df$y[t])\r\n        df$K[t+1] <- K_lom(df$K[t], df$I_y[t], delta)\r\n        df$Y[t+1] <- Y(df$A[t+1], df$K[t+1], X, df$L[t+1]*(1-a), gamma, alpha, beta)\r\n        df$I_y[t+1] <- I_y(df$Y[t+1], s)\r\n        df$I_a[t+1] <- I_a(df$A[t+1], df$K[t+1], df$L[t+1]*a, z, phi, theta)\r\n        df$C[t+1] <- df$Y[t+1] - df$I_y[t+1]\r\n        df$c[t+1] <- df$C[t+1] / df$L[t+1]\r\n        df$y[t+1] <- df$Y[t+1] / df$L[t+1]\r\n        df$k[t+1] <- df$K[t+1] / df$L[t+1]\r\n        df$x[t+1] <- X / df$L[t+1]\r\n        df$g_Y[t+1] <- (df$Y[t+1] - df$Y[t]) / df$Y[t]\r\n        df$g_A[t+1] <- (df$A[t+1] - df$A[t]) / df$A[t]\r\n        df$g_K[t+1] <- (df$K[t+1] - df$K[t]) / df$K[t]\r\n        df$g_L[t+1] <- (df$L[t+1] - df$L[t]) / df$L[t]\r\n        df$g_y[t+1] <- (df$y[t+1] - df$y[t]) / df$y[t]\r\n        df$g_k[t+1] <- (df$k[t+1] - df$k[t]) / df$k[t]\r\n        df$g_C[t+1] <- (df$C[t+1] - df$C[t]) / df$C[t]\r\n        df$g_c[t+1] <- (df$c[t+1] - df$c[t]) / df$c[t]\r\n    }\r\n    return(df)\r\n}\r\n\r\n# Solow\r\ndf_solow <- simulate(\r\n    alpha = 0.33,\r\n    delta = 0.1,\r\n    s = 0.3\r\n)\r\n\r\n# Malthus\r\ndf_malthus <- simulate(\r\n    K = 0,\r\n    beta = 0.33,\r\n    b0 = 0.01,\r\n    d0 = 0.1,\r\n    d1 = 0.1\r\n)\r\n\r\ndf_romer <- simulate(\r\n    alpha = 0.33,\r\n    delta = 0.1,\r\n    s = 0.3,\r\n    z = 0.01,\r\n    a = 0.2,\r\n    phi = 1\r\n)\r\n\r\ndf_jones <- simulate(\r\n    alpha = 0.33,\r\n    delta = 0.1,\r\n    s = 0.3,\r\n    z = 0.01,\r\n    a = 0.2,\r\n    phi = 0,\r\n    gamma = 0.2,\r\n    b0 = 0.01,\r\n    T = 1000\r\n)\r\n\r\ndf_jones_ai <- simulate(\r\n    alpha = 0.33,\r\n    delta = 0.1,\r\n    s = 0.3,\r\n    z = 0.01,\r\n    a = 0.2,\r\n    phi = 0.5,\r\n    gamma = 1,\r\n    theta = 0.9,\r\n    T = 1000\r\n)\r\n\r\n\r\nsidebar_accordion <- accordion(\r\n    accordion_panel(\r\n        \"Production Function\",\r\n        icon = fa(\"hammer\"),\r\n        sliderInput(\"alpha\", withMathJax(\"\\\\(\\\\alpha\\\\) (capital share)\"), value = 0.3, min = 0, max = 1, step = 0.1),\r\n        sliderInput(\"beta\", withMathJax(\"\\\\(\\\\beta\\\\) (land share)\"), value = 0.3, min = 0, max = 1, step = 0.1),\r\n        sliderInput(\"gamma\", withMathJax(\"\\\\(\\\\gamma\\\\) (TFP returns to scale)\"), value = 1, min = 0, max = 1, step = 0.1)\r\n    ),\r\n    accordion_panel(\r\n        \"Capital Dynamics\",\r\n        icon = fa(\"industry\"),\r\n        sliderInput(\"delta\", withMathJax(\"\\\\(\\\\delta\\\\) (depreciation rate)\"), value = 0.1, min = 0, max = 1, step = 0.1),\r\n        sliderInput(\"s\", withMathJax(\"\\\\(s\\\\) (savings rate)\"), value = 0.3, min = 0, max = 1, step = 0.1)\r\n    ),\r\n    accordion_panel(\r\n        \"Population Dynamics\",\r\n        icon = fa(\"baby-carriage\"),\r\n        sliderInput(\"b0\", withMathJax(\"\\\\(b_0\\\\) (birth rate)\"), value = 0, min = 0, max = 1, step = 0.1),\r\n        sliderInput(\"d0\", withMathJax(\"\\\\(d_0\\\\) (death rate intercept)\"), value = 0, min = 0, max = 1, step = 0.1),\r\n        sliderInput(\"d1\", withMathJax(\"\\\\(d_1\\\\) (death rate slope w.r.t. \\\\(y\\\\))\"), value = 0, min = 0, max = 1, step = 0.1)\r\n    ),\r\n    accordion_panel(\r\n        \"TFP Dynamics\",\r\n        icon = fa(\"flask\"),\r\n        sliderInput(\"z\", withMathJax(\"\\\\(z\\\\) (research productivity)\"), value = 0, min = 0, max = 10, step = 1),\r\n        sliderInput(\"phi\", withMathJax(\"\\\\(\\\\phi\\\\) (research returns to scale)\"), value = 0, min = 0, max = 1, step = 0.1),\r\n        sliderInput(\"theta\", withMathJax(\"\\\\(\\\\theta\\\\) (research automation)\"), value = 0, min = 0, max = 1, step = 0.1),\r\n        sliderInput(\"a\", withMathJax(\"\\\\(a\\\\) (researcher share)\"), value = 0, min = 0, max = 1, step = 0.1)\r\n    ),\r\n    accordion_panel(\r\n        \"Initial Values\",\r\n        icon = fa(\"rocket\"),\r\n        sliderInput(\"K_1\", withMathJax(\"\\\\(K_1\\\\) (initial capital)\"), value = 1, min = 1, max = 10, step = 1),\r\n        sliderInput(\"L_1\", withMathJax(\"\\\\(L_1\\\\) (initial labor)\"), value = 1, min = 1, max = 10, step = 1),\r\n        sliderInput(\"A_1\", withMathJax(\"\\\\(A_1\\\\) (initial TFP)\"), value = 1, min = 1, max = 10, step = 1),\r\n        sliderInput(\"X\", withMathJax(\"\\\\(X\\\\) (permanent land)\"), value = 1, min = 1, max = 10, step = 1)\r\n    ),\r\n    accordion_panel(\r\n        \"Simulation Settings\",\r\n        icon = fa(\"gamepad\"),\r\n        sliderInput(\"T\", withMathJax(\"\\\\(T\\\\) (number of periods)\"), value = 200, min = 50, max = 500, step = 50)\r\n    )\r\n)\r\n\r\npanel_graph_width = \"500px\"\r\nlayout_column_wrap_plots <- function(...) {\r\n    # for each passed plot name, create a card with plotlyOutput, compose them into a layout_column_wrap with globally defined width\r\n    plot_names <- list(...)\r\n    cards <- lapply(plot_names, function(plot_name) {\r\n        card(\r\n            plotlyOutput(plot_name)\r\n        )\r\n    })\r\n    do.call(\r\n        layout_column_wrap,\r\n        c(list(width = panel_graph_width), cards)\r\n    )\r\n}\r\n\r\naggregates_panel <- layout_column_wrap_plots(\r\n    \"Y_plot\",\r\n    \"A_plot\",\r\n    \"K_plot\",\r\n    \"L_plot\",\r\n    \"C_plot\"\r\n)\r\nper_capita_panel <- layout_column_wrap_plots(\r\n    \"y_plot\",\r\n    \"k_plot\",\r\n    \"x_plot\",\r\n    \"c_plot\"\r\n)\r\ngrowth_aggregates_panel <- layout_column_wrap_plots(\r\n    \"g_Y_plot\",\r\n    \"g_A_plot\",\r\n    \"g_K_plot\",\r\n    \"g_L_plot\",\r\n    \"g_C_plot\"\r\n)\r\ngrowth_per_capita_panel <- layout_column_wrap_plots(\r\n    \"g_y_plot\",\r\n    \"g_k_plot\",\r\n    \"g_c_plot\"\r\n)\r\n\r\n\r\nui <- page_sidebar(\r\n    sidebar = sidebar(\r\n        title = \"Parameters\",\r\n        sidebar_accordion\r\n    ),\r\n    navset_pill(\r\n        nav_panel(title = \"Aggregates\", aggregates_panel),\r\n        nav_panel(title = \"Per Capita\", per_capita_panel),\r\n        nav_panel(title = \"Growth: Aggregates\", growth_aggregates_panel),\r\n        nav_panel(title = \"Growth: Per Capita\", growth_per_capita_panel),\r\n        nav_panel(title = \"Table\", \r\n            # using the \"EDIT\" solution from https://stackoverflow.com/a/54762876 to render table with mathjax: other approaches didn't work\r\n            uiOutput(\"table_test\")\r\n        )\r\n    )\r\n)\r\n\r\n\r\nrender_plot_ly_simul <- function(simulation, y_col, title) {\r\n    # have to pass reactive()'s output (simulation) as a variable and then invoke it as a function here (simulation()), otherwise the graph won't update\r\n    renderPlotly({\r\n        plot_ly(simulation(), x = ~period, y = as.formula(paste0(\"~\", y_col)), type = 'scatter', mode = 'lines') |>\r\n        layout(\r\n            title = TeX(title),\r\n            xaxis = list(title = \"Period\"),\r\n            yaxis = list(title = \"\")\r\n        ) |>\r\n        config(\r\n            mathjax = \"cdn\"\r\n        )\r\n    })\r\n}\r\n\r\nserver <- function(input, output, session) {\r\n    simulation <- reactive(simulate(\r\n        L_1 = input$L_1,\r\n        K_1 = input$K_1,\r\n        A_1 = input$A_1,\r\n        alpha = input$alpha,\r\n        beta = input$beta,\r\n        gamma = input$gamma,\r\n        delta = input$delta,\r\n        phi = input$phi,\r\n        theta = input$theta,\r\n        b0 = input$b0,\r\n        d0 = input$d0,\r\n        d1 = input$d1,\r\n        z = input$z,\r\n        s = input$s,\r\n        a = input$a,\r\n        X = input$X\r\n    ))\r\n    output$dynamic <- renderTable(\r\n        {\r\n            simulation() |>\r\n            rename_with(\r\n                ~ paste0(\"$$\", .x, \"$$\")\r\n            )\r\n        },\r\n        include.colnames = TRUE,\r\n        striped = TRUE,\r\n        digits = 3\r\n    )\r\n    output$table_test <- renderUI(\r\n        # using the \"EDIT\" solution from https://stackoverflow.com/a/54762876 to render table with mathjax: other approaches didn't work\r\n        tagList(\r\n            withMathJax(),\r\n            withMathJax(\r\n                tableOutput(\"dynamic\")\r\n            )\r\n        )\r\n    )\r\n    output$Y_plot <- render_plot_ly_simul(simulation, \"Y\", \"Y\")\r\n    output$A_plot <- render_plot_ly_simul(simulation, \"A\", \"A\")\r\n    output$K_plot <- render_plot_ly_simul(simulation, \"K\", \"K\")\r\n    output$L_plot <- render_plot_ly_simul(simulation, \"L\", \"L\")\r\n    output$C_plot <- render_plot_ly_simul(simulation, \"C\", \"C\")\r\n    output$g_Y_plot <- render_plot_ly_simul(simulation, \"g_Y\", \"g_Y\")\r\n    output$g_A_plot <- render_plot_ly_simul(simulation, \"g_A\", \"g_A\")\r\n    output$g_K_plot <- render_plot_ly_simul(simulation, \"g_K\", \"g_K\")\r\n    output$g_L_plot <- render_plot_ly_simul(simulation, \"g_L\", \"g_L\")\r\n    output$g_C_plot <- render_plot_ly_simul(simulation, \"g_C\", \"g_C\")\r\n    output$g_y_plot <- render_plot_ly_simul(simulation, \"g_y\", \"g_y\")\r\n    output$g_k_plot <- render_plot_ly_simul(simulation, \"g_k\", \"g_k\")\r\n    output$g_c_plot <- render_plot_ly_simul(simulation, \"g_c\", \"g_c\")\r\n    output$x_plot <- render_plot_ly_simul(simulation, \"x\", \"x\")\r\n    output$k_plot <- render_plot_ly_simul(simulation, \"k\", \"k\")\r\n    output$y_plot <- render_plot_ly_simul(simulation, \"y\", \"y\")\r\n    output$c_plot <- render_plot_ly_simul(simulation, \"c\", \"c\")\r\n}\r\nshinyApp(ui, server)","type":"text"}]
